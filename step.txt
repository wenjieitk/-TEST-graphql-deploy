- npm i prisma -g
- prisma init <name>
- cd prisma
- "ssl: true" -> docker-compose.yml
- docker-compose up -d
- prisma deploy

prisma-binding -> interact prisma with graphql
graphql-cli -> to fetch the graphql schema from prisma and store it to local project

@unique
@relation - [CASCADE,SET_NULL]


prisma token
- {
    "Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InNlcnZpY2UiOiJkZWZhdWx0QGRlZmF1bHQiLCJyb2xlcyI6WyJhZG1pbiJdfSwiaWF0IjoxNTQyMTg0MzMyLCJleHAiOjE1NDI3ODkxMzJ9.G1L0QyN5veypcq_WB23WQN7TLfLfP4R1Gaye2lMcp4M"
  }


prisma deploy based on environment
- prisma deploy -e ../config/dev.env

jdbc for postgre
- <dbname>/?sslmode=require

get production url
 1. prisma login
 2. prisma deploy -e ../config/prod.env
 3. configure prod.env according to new endpoint in prisma.yml

deploy production nodeJs to heroku
 1. npm install -g heroku
 2. set port in index.js to environment variable - <process.env.PORT || 4000>
 3. set prisma.js endpoint -> process.env.PRISMA_ENDPOINT
 4. install env-cmd to run dev config for local development
 5. env-cmd ./config/dev.env nodemon ... in package.json
 6. set up heroku postbuild to run babel (if any) #--copy-files = add in those file other than .js
 7. install polyfill in index.js = <import '@babel/polyfill/noConflict'>
 8. set up environment variable by <heroku config:set xxxx>
 9. git push heroku master


set up environment variables
 - prisma.js -> secret: process.env.PRISMA_SECRET
 - prisma.yml -> secret: ${env:PRISMA_SECRET}
 - heroku config:set PRISMA_SECRET=mysecret
 - generateToken.js && getUserId.js -> process.env.JWT_SECRET


 setting up test environment
  - ${endpoint}/test
  - prisma deploy ../config/test.env